//
//  KeyboardLayoutISO.m
//  TouchBar
//
//  Generated by generate_keyboard_layouts.sh.
//  Copyright Â© 2016 Bikkelbroeders. All rights reserved.
//

#import "KeyboardLayoutISO.h"

@implementation KeyboardLayoutISO

/*************************************************************
 *                                                           *
 *   WARNING: this is an auto-generated file. DO NOT EDIT!   *
 *                                                           *
 *************************************************************/

- (KeyboardLayoutType)type {
    return KeyboardLayoutTypeISO;
}

- (UInt8)macKbdType {
    return 59;
}

- (CGSize)size {
    return CGSizeMake(290, 113);
}

- (NSUInteger)numberOfKeys {
    return 66;
}

- (KeyCode)keyCodeForKeyIndex:(NSUInteger)keyIndex {
    switch (keyIndex) {
        case  0: return 0x0A; // kVK_ISO_Section
        case  1: return 0x12; // kVK_ANSI_1
        case  2: return 0x13; // kVK_ANSI_2
        case  3: return 0x14; // kVK_ANSI_3
        case  4: return 0x15; // kVK_ANSI_4
        case  5: return 0x17; // kVK_ANSI_5
        case  6: return 0x16; // kVK_ANSI_6
        case  7: return 0x1A; // kVK_ANSI_7
        case  8: return 0x1C; // kVK_ANSI_8
        case  9: return 0x19; // kVK_ANSI_9
        case 10: return 0x1D; // kVK_ANSI_0
        case 11: return 0x1B; // kVK_ANSI_Minus
        case 12: return 0x18; // kVK_ANSI_Equal
        case 13: return 0x1E; // kVK_ANSI_RightBracket
        case 14: return 0x21; // kVK_ANSI_LeftBracket
        case 15: return 0x23; // kVK_ANSI_P
        case 16: return 0x1F; // kVK_ANSI_O
        case 17: return 0x22; // kVK_ANSI_I
        case 18: return 0x20; // kVK_ANSI_U
        case 19: return 0x10; // kVK_ANSI_Y
        case 20: return 0x11; // kVK_ANSI_T
        case 21: return 0x0F; // kVK_ANSI_R
        case 22: return 0x0E; // kVK_ANSI_E
        case 23: return 0x0D; // kVK_ANSI_W
        case 24: return 0x0C; // kVK_ANSI_Q
        case 25: return 0x00; // kVK_ANSI_A
        case 26: return 0x01; // kVK_ANSI_S
        case 27: return 0x02; // kVK_ANSI_D
        case 28: return 0x03; // kVK_ANSI_F
        case 29: return 0x05; // kVK_ANSI_G
        case 30: return 0x04; // kVK_ANSI_H
        case 31: return 0x26; // kVK_ANSI_J
        case 32: return 0x28; // kVK_ANSI_K
        case 33: return 0x25; // kVK_ANSI_L
        case 34: return 0x29; // kVK_ANSI_Semicolon
        case 35: return 0x27; // kVK_ANSI_Quote
        case 36: return 0x2A; // kVK_ANSI_Backslash
        case 37: return 0x2C; // kVK_ANSI_Slash
        case 38: return 0x2F; // kVK_ANSI_Period
        case 39: return 0x2B; // kVK_ANSI_Comma
        case 40: return 0x2E; // kVK_ANSI_M
        case 41: return 0x2D; // kVK_ANSI_N
        case 42: return 0x0B; // kVK_ANSI_B
        case 43: return 0x09; // kVK_ANSI_V
        case 44: return 0x08; // kVK_ANSI_C
        case 45: return 0x07; // kVK_ANSI_X
        case 46: return 0x06; // kVK_ANSI_Z
        case 47: return 0x32; // kVK_ANSI_Grave
        case 48: return 0x3F; // kVK_Function
        case 49: return 0x3B; // kVK_Control
        case 50: return 0x3A; // kVK_Option
        case 51: return 0x3A; // kVK_Option
        case 52: return 0x37; // kVK_Command
        case 53: return 0x37; // kVK_Command
        case 54: return 0x7B; // kVK_LeftArrow
        case 55: return 0x7D; // kVK_DownArrow
        case 56: return 0x7C; // kVK_RightArrow
        case 57: return 0x7E; // kVK_UpArrow
        case 58: return 0x33; // kVK_Delete
        case 59: return 0x30; // kVK_Tab
        case 60: return 0x24; // kVK_Return
        case 61: return 0x39; // kVK_CapsLock
        case 62: return 0x38; // kVK_Shift
        case 63: return 0x38; // kVK_Shift
        case 64: return 0x31; // kVK_Space
        default: return [super keyCodeForKeyIndex:keyIndex];
    }
}

- (KeyEventModifierFlags)modifierFlagForKeyIndex:(NSUInteger)keyIndex {
    switch (keyIndex) {
        case 48: return KeyEventModifierFlagFunction;
        case 49: return KeyEventModifierFlagControl;
        case 50: return KeyEventModifierFlagOption;
        case 51: return KeyEventModifierFlagOption;
        case 52: return KeyEventModifierFlagCommand;
        case 53: return KeyEventModifierFlagCommand;
        case 61: return KeyEventModifierFlagCapsLock;
        case 62: return KeyEventModifierFlagShift;
        case 63: return KeyEventModifierFlagShift;
        default: return [super modifierFlagForKeyIndex:keyIndex];
    }
}

#if TARGET_OS_IPHONE
- (UIBezierPath *)bezierPathForKeyIndex:(NSUInteger)keyIndex {
    switch (keyIndex) {
        case  0: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(0.5, 13.5, 19, 19) cornerRadius:2.0];
        case  1: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(20.5, 13.5, 19, 19) cornerRadius:2.0];
        case  2: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(40.5, 13.5, 19, 19) cornerRadius:2.0];
        case  3: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(60.5, 13.5, 19, 19) cornerRadius:2.0];
        case  4: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(80.5, 13.5, 19, 19) cornerRadius:2.0];
        case  5: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(100.5, 13.5, 19, 19) cornerRadius:2.0];
        case  6: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(120.5, 13.5, 19, 19) cornerRadius:2.0];
        case  7: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(140.5, 13.5, 19, 19) cornerRadius:2.0];
        case  8: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(160.5, 13.5, 19, 19) cornerRadius:2.0];
        case  9: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(180.5, 13.5, 19, 19) cornerRadius:2.0];
        case 10: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(200.5, 13.5, 19, 19) cornerRadius:2.0];
        case 11: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(220.5, 13.5, 19, 19) cornerRadius:2.0];
        case 12: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(240.5, 13.5, 19, 19) cornerRadius:2.0];
        case 13: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(250.5, 33.5, 19, 19) cornerRadius:2.0];
        case 14: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(230.5, 33.5, 19, 19) cornerRadius:2.0];
        case 15: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(210.5, 33.5, 19, 19) cornerRadius:2.0];
        case 16: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(190.5, 33.5, 19, 19) cornerRadius:2.0];
        case 17: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(170.5, 33.5, 19, 19) cornerRadius:2.0];
        case 18: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(150.5, 33.5, 19, 19) cornerRadius:2.0];
        case 19: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(130.5, 33.5, 19, 19) cornerRadius:2.0];
        case 20: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(110.5, 33.5, 19, 19) cornerRadius:2.0];
        case 21: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(90.5, 33.5, 19, 19) cornerRadius:2.0];
        case 22: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(70.5, 33.5, 19, 19) cornerRadius:2.0];
        case 23: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(50.5, 33.5, 19, 19) cornerRadius:2.0];
        case 24: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(30.5, 33.5, 19, 19) cornerRadius:2.0];
        case 25: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(35.5, 53.5, 19, 19) cornerRadius:2.0];
        case 26: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(55.5, 53.5, 19, 19) cornerRadius:2.0];
        case 27: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(75.5, 53.5, 19, 19) cornerRadius:2.0];
        case 28: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(95.5, 53.5, 19, 19) cornerRadius:2.0];
        case 29: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(115.5, 53.5, 19, 19) cornerRadius:2.0];
        case 30: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(135.5, 53.5, 19, 19) cornerRadius:2.0];
        case 31: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(155.5, 53.5, 19, 19) cornerRadius:2.0];
        case 32: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(175.5, 53.5, 19, 19) cornerRadius:2.0];
        case 33: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(195.5, 53.5, 19, 19) cornerRadius:2.0];
        case 34: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(215.5, 53.5, 19, 19) cornerRadius:2.0];
        case 35: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(235.5, 53.5, 19, 19) cornerRadius:2.0];
        case 36: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(255.5, 53.5, 19, 19) cornerRadius:2.0];
        case 37: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(225.5, 73.5, 19, 19) cornerRadius:2.0];
        case 38: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(205.5, 73.5, 19, 19) cornerRadius:2.0];
        case 39: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(185.5, 73.5, 19, 19) cornerRadius:2.0];
        case 40: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(165.5, 73.5, 19, 19) cornerRadius:2.0];
        case 41: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(145.5, 73.5, 19, 19) cornerRadius:2.0];
        case 42: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(125.5, 73.5, 19, 19) cornerRadius:2.0];
        case 43: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(105.5, 73.5, 19, 19) cornerRadius:2.0];
        case 44: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(85.5, 73.5, 19, 19) cornerRadius:2.0];
        case 45: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(65.5, 73.5, 19, 19) cornerRadius:2.0];
        case 46: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(45.5, 73.5, 19, 19) cornerRadius:2.0];
        case 47: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(25.5, 73.5, 19, 19) cornerRadius:2.0];
        case 48: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(0.5, 93.5, 19, 19) cornerRadius:2.0];
        case 49: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(20.5, 93.5, 19, 19) cornerRadius:2.0];
        case 50: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(40.5, 93.5, 19, 19) cornerRadius:2.0];
        case 51: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(210.5, 93.5, 19, 19) cornerRadius:2.0];
        case 52: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(60.5, 93.5, 24, 19) cornerRadius:2.0];
        case 53: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(185.5, 93.5, 24, 19) cornerRadius:2.0];
        case 54: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(230.5, 93.5, 19, 19) cornerRadius:2];
        case 55: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(250.5, 103, 19, 9.5) cornerRadius:2];
        case 56: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(270.5, 93.5, 19, 19) cornerRadius:2];
        case 57: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(250.5, 93.5, 19, 9.5) cornerRadius:2];
        case 58: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(260.5, 13.5, 29, 19) cornerRadius:2.0];
        case 59: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(0.5, 33.5, 29, 19) cornerRadius:2.0];
        case 60: {
            UIBezierPath *path = [UIBezierPath new];
            [path moveToPoint:CGPointMake(270.5, 35.5)];
            [path addArcWithCenter:CGPointMake(272.48323969742, 35.24161984871) radius:2 startAngle:3.012040486441 endAngle:-2.0847452684394 clockwise:YES];
            [path addLineToPoint:CGPointMake(287.5, 33.5)];
            [path addArcWithCenter:CGPointMake(287.5, 35.5) radius:2 startAngle:-1.5707963267949 endAngle:0 clockwise:YES];
            [path addLineToPoint:CGPointMake(289.5, 70.5)];
            [path addArcWithCenter:CGPointMake(287.5, 70.5) radius:2 startAngle:0 endAngle:1.5707963267949 clockwise:YES];
            [path addLineToPoint:CGPointMake(277.5, 72.5)];
            [path addArcWithCenter:CGPointMake(277.5, 70.5) radius:2 startAngle:1.5707963267949 endAngle:3.1415926535898 clockwise:YES];
            [path addLineToPoint:CGPointMake(275.5, 53.5)];
            [path addArcWithCenter:CGPointMake(273.75838015129, 54.483239697419) radius:2 startAngle:-0.51394894164447 endAngle:-1.7003484939437 clockwise:NO];
            [path addLineToPoint:CGPointMake(271.5, 52.5)];
            [path addArcWithCenter:CGPointMake(272.32287565553, 50.677124344468) radius:2 startAngle:1.9948273662856 endAngle:2.7175616140991 clockwise:YES];
            [path closePath];
            return path;
        }
        case 61: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(0.5, 53.5, 34, 19) cornerRadius:2.0];
        case 62: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(0.5, 73.5, 24, 19) cornerRadius:2.0];
        case 63: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(245.5, 73.5, 44, 19) cornerRadius:2.0];
        case 64: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(85.5, 93.5, 99, 19) cornerRadius:2.0];
        case 65: return [UIBezierPath bezierPathWithRoundedRect:CGRectMake(0.5, 0.5, 289, 12) cornerRadius:2];
        default: return [super bezierPathForKeyIndex:keyIndex];
    }
}
#endif

- (CGPoint)textPositionForKeyIndex:(NSUInteger)keyIndex {
    switch (keyIndex) {
        case  0: return CGPointMake(10, 21.5);
        case  1: return CGPointMake(30, 21.5);
        case  2: return CGPointMake(50, 21.5);
        case  3: return CGPointMake(70, 21.5);
        case  4: return CGPointMake(90, 21.5);
        case  5: return CGPointMake(110, 21.5);
        case  6: return CGPointMake(130, 21.5);
        case  7: return CGPointMake(150, 21.5);
        case  8: return CGPointMake(170, 21.5);
        case  9: return CGPointMake(190, 21.5);
        case 10: return CGPointMake(210, 21.5);
        case 11: return CGPointMake(230, 21.5);
        case 12: return CGPointMake(250, 21.5);
        case 13: return CGPointMake(260, 41.5);
        case 14: return CGPointMake(240, 41.5);
        case 15: return CGPointMake(220, 41.5);
        case 16: return CGPointMake(200, 41.5);
        case 17: return CGPointMake(180, 41.5);
        case 18: return CGPointMake(160, 41.5);
        case 19: return CGPointMake(140, 41.5);
        case 20: return CGPointMake(120, 41.5);
        case 21: return CGPointMake(100, 41.5);
        case 22: return CGPointMake(80, 41.5);
        case 23: return CGPointMake(60, 41.5);
        case 24: return CGPointMake(40, 41.5);
        case 25: return CGPointMake(45, 61.5);
        case 26: return CGPointMake(65, 61.5);
        case 27: return CGPointMake(85, 61.5);
        case 28: return CGPointMake(105, 61.5);
        case 29: return CGPointMake(125, 61.5);
        case 30: return CGPointMake(145, 61.5);
        case 31: return CGPointMake(165, 61.5);
        case 32: return CGPointMake(185, 61.5);
        case 33: return CGPointMake(205, 61.5);
        case 34: return CGPointMake(225, 61.5);
        case 35: return CGPointMake(245, 61.5);
        case 36: return CGPointMake(265, 61.5);
        case 37: return CGPointMake(235, 81.5);
        case 38: return CGPointMake(215, 81.5);
        case 39: return CGPointMake(195, 81.5);
        case 40: return CGPointMake(175, 81.5);
        case 41: return CGPointMake(155, 81.5);
        case 42: return CGPointMake(135, 81.5);
        case 43: return CGPointMake(115, 81.5);
        case 44: return CGPointMake(95, 81.5);
        case 45: return CGPointMake(75, 81.5);
        case 46: return CGPointMake(55, 81.5);
        case 47: return CGPointMake(35, 82.5);
        case 48: return CGPointMake(10, 102.5);
        case 49: return CGPointMake(30, 102.5);
        case 50: return CGPointMake(50, 102.5);
        case 51: return CGPointMake(220, 102.5);
        case 52: return CGPointMake(73, 102.5);
        case 53: return CGPointMake(197, 102.5);
        case 54: return CGPointMake(240, 102.5);
        case 55: return CGPointMake(260, 107.25);
        case 56: return CGPointMake(280, 102.5);
        case 57: return CGPointMake(260, 97.75);
        case 58: return CGPointMake(276, 21.5);
        case 59: return CGPointMake(14, 41.5);
        case 60: return CGPointMake(281, 47.5);
        case 61: return CGPointMake(16, 61.5);
        case 62: return CGPointMake(12, 82.5);
        case 63: return CGPointMake(266, 82.5);
        case 64: return CGPointMake(124, 102.5);
        default: return [super textPositionForKeyIndex:keyIndex];
    }
}

- (CGFloat)fontSizeForKeyIndex:(NSUInteger)keyIndex {
    switch (keyIndex) {
        case  0: return 8;
        case  1: return 8;
        case  2: return 8;
        case  3: return 8;
        case  4: return 8;
        case  5: return 8;
        case  6: return 8;
        case  7: return 8;
        case  8: return 8;
        case  9: return 8;
        case 10: return 8;
        case 11: return 8;
        case 12: return 8;
        case 13: return 8;
        case 14: return 8;
        case 15: return 9;
        case 16: return 9;
        case 17: return 9;
        case 18: return 9;
        case 19: return 9;
        case 20: return 9;
        case 21: return 9;
        case 22: return 9;
        case 23: return 9;
        case 24: return 9;
        case 25: return 9;
        case 26: return 9;
        case 27: return 9;
        case 28: return 9;
        case 29: return 9;
        case 30: return 9;
        case 31: return 9;
        case 32: return 9;
        case 33: return 9;
        case 34: return 9;
        case 35: return 9;
        case 36: return 8;
        case 37: return 9;
        case 38: return 9;
        case 39: return 9;
        case 40: return 9;
        case 41: return 9;
        case 42: return 9;
        case 43: return 9;
        case 44: return 9;
        case 45: return 9;
        case 46: return 9;
        case 47: return 9;
        case 48: return 7;
        case 49: return 7;
        case 50: return 8;
        case 51: return 8;
        case 52: return 8;
        case 53: return 8;
        case 54: return 4;
        case 55: return 4;
        case 56: return 4;
        case 57: return 4;
        case 58: return 7;
        case 59: return 8;
        case 60: return 8;
        case 61: return 8;
        case 62: return 8;
        case 63: return 8;
        case 64: return 8;
        default: return [super fontSizeForKeyIndex:keyIndex];
    }
}

@end
